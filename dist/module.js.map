{"mappings":";;;ACAA;;AAGO,MAAM,yCAAkB;IAM3B,YAAY,SAAsB,EAAE,UAAkB,CAAE;QACpD,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,IAAI,EAAE,CAAC;KACf;IAED,AAAO,QAAQ,CAAC,KAAa,EAAQ;QACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACtB;IAED,AAAO,SAAS,CAAC,MAAc,EAAQ;QACnC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,AAAO,QAAQ,GAAW;QACtB,OAAO,IAAI,CAAC,KAAK,CAAA;KACpB;IAED,AAAO,SAAS,GAAW;QACvB,OAAO,IAAI,CAAC,MAAM,CAAA;KACrB;IAED,AAAO,IAAI,GAAS;QAChB,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC;QAChD,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,yDAAyD;QACxF,IAAI,GAAG,GAAgB,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,AAAC;QACrD,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;QAChC,MAAM,KAAK,GAAG,GAAG,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,AAAC;QACjD,MAAM,EAtCd,GAsCe,CAAC,CAAA,EAtChB,GAsCkB,CAAC,CAAA,EAtCnB,OAsCqB,KAAK,CAAA,EAtC1B,QAsC4B,MAAM,CAAA,EAAC,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,AAAC;QACpD,MAAM,QAAQ,GAAG,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,AAAC;QAC7C,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,AAAC;QAE/C,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QACzB,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC;QAC3B,MAAM,IAAI,GAAG,UAAG,EAAE,CACb,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CACrB,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAC5B,OAAO,CAAC;YACL,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,GAAG;YACZ,OAAO,EAAE,GAAG;YACZ,UAAU,EAAE,GAAG;YACf,OAAO,EAAE;gBAAE,GAAG,EAAE,CAAC;gBAAE,IAAI,EAAE,CAAC;gBAAE,KAAK,EAAE,CAAC;gBAAE,MAAM,EAAE,CAAC;aAAE;SACpD,CAAC,AAAC;QAEP,GAAG,GAAiB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC;QACrE,GAAG,CAAC,KAAK,CAAC,QAAQ,GAAG,SAAS,CAAC;QAE/B,4DAA4D;QAC5D,0FAA0F;QAC1F,GAAG,GAAiB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;QACzC,GAAG,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;IAE/B,uCAAuC;IACvC,+CAA+C;IAC/C,MAAM;IACN,qCAAqC;IACrC,kDAAkD;IAClD,MAAM;IAEN,8CAA8C;IAC9C,mDAAmD;IACnD,qDAAqD;IACrD,iDAAiD;IACjD,uEAAuE;IAEvE,kDAAkD;IAClD,oCAAoC;IACpC,IAAI;IACJ,kCAAkC;KACrC;CACJ;;ADlFD","sources":["src/index.ts","src/network-area-diagram.ts"],"sourcesContent":["export {NetworkAreaDiagram} from './network-area-diagram'","import { SVG } from '@svgdotjs/svg.js';\nimport '@svgdotjs/svg.panzoom.js';\n\nexport class NetworkAreaDiagram {\n    container: HTMLElement;\n    svgContent: string;\n    width: number;\n    height: number;\n\n    constructor(container: HTMLElement, svgContent: string) {\n        console.info('container', container)\n        this.container = container;\n        this.svgContent = svgContent;\n        this.init();\n    }\n\n    public setWidth(width: number): void {\n        this.width = width;\n    }\n\n    public setHeight(height: number): void {\n        this.height = height;\n    }\n\n    public getWidth(): number {\n        return this.width\n    }\n\n    public getHeight(): number {\n        return this.height\n    }\n\n    public init(): void {\n        console.info('this.svgContent', this.svgContent)\n        this.container.innerHTML = ''; // clear the previous svg in div element before replacing\n        let tmp: HTMLElement = document.createElement('div');\n        tmp.innerHTML = this.svgContent;\n        const svgEl = tmp.getElementsByTagName('svg')[0];\n        const {x, y, width, height} = svgEl.viewBox.baseVal;\n        const svgWidth = svgEl.getAttribute('width');\n        const svgHeight = svgEl.getAttribute('height');\n\n        this.setWidth(+svgWidth);\n        this.setHeight(+svgHeight);\n        const draw = SVG()\n            .addTo(this.container)\n            .size(svgWidth, svgHeight)\n            .viewbox(x, y, width, height)\n            .panZoom({\n                panning: true,\n                zoomMin: 0.5,\n                zoomMax: 200,\n                zoomFactor: 0.3,\n                margins: { top: 0, left: 0, right: 0, bottom: 0 },\n            });\n\n        tmp = <HTMLElement> draw.svg(this.svgContent).node.firstElementChild;\n        tmp.style.overflow = 'visible';\n\n        // PowSyBl NAD introduced server side calculated SVG viewbox\n        // waiting for deeper adaptation, remove it and still rely on client side computed viewbox\n        tmp = <HTMLElement> draw.node.firstChild;\n        tmp.removeAttribute('viewBox');\n\n        // draw.on('panStart', function (evt) {\n        //     this.nadContainer.style.cursor = 'move';\n        // });\n        // draw.on('panEnd', function (evt) {\n        //     this.nadContainer.style.cursor = 'default';\n        // });\n\n        // this.container.appendChild(this.container);\n        // this.container.style.svgWidth = svgWidth + 'px';\n        // this.container.style.svgHeight = svgHeight + 'px';\n        // this.container.appendChild(this.nadContainer);\n        // this.container.insertAdjacentElement('afterend', this.nadContainer);\n\n        // if (draw && svgUrlRef.current === svg.svgUrl) {\n        //     draw.viewbox(draw.viewbox());\n        // }\n        // svgUrlRef.current = svg.svgUrl;\n    }\n}\n\n"],"names":[],"version":3,"file":"module.js.map"}